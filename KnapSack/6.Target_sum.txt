class Solution {
public:
    int countTargetSum(int sum,vector<int> &nums)
    {
        int n=nums.size();
        vector<vector<int>> dp(n+1,vector<int>(sum+1));
        for(int i=0;i<sum+1;i++)
            dp[0][i]=0;
        for(int i=0;i<n+1;i++)
            dp[i][0]=1;
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(nums[i-1]<=j)
                    dp[i][j]=dp[i-1][j] + dp[i-1][j-nums[i-1]];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][sum];
    }

    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        for(auto it:nums)
            sum+=it;
        int rqSum=(sum-target)/2;
        return countTargetSum(rqSum,nums);
    }
};